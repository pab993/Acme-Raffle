
package controllers;

import java.util.Collection;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import services.CodeService;
import services.PrizeService;
import services.RaffleService;
import services.UserService;
import domain.Code;
import domain.Prize;
import domain.Raffle;
import domain.User;
import forms.CodeForm;

@Controller
@RequestMapping("/code")
public class CodeController extends AbstractController {

	// Services
	// ============================================================================

	@Autowired
	private UserService		userService;

	@Autowired
	private RaffleService	raffleService;

	@Autowired
	private PrizeService	prizeService;

	@Autowired
	private CodeService		codeService;


	// Constructors
	// ============================================================================

	public CodeController() {
		super();
	}

	//Listing
	// ============================================================================

	@RequestMapping(value = "/myList", method = RequestMethod.GET)
	public ModelAndView listUser(@RequestParam(required = false) final Integer prizeId) {
		ModelAndView result;

		try {
			final Collection<Code> codes;
			User principal;
			principal = this.userService.findByPrincipal();

			final Prize prize = this.prizeService.findOne(prizeId);
			Assert.notNull(prize);

			codes = this.codeService.findAllByUserAndPrize(principal.getId(), prize.getId());

			result = new ModelAndView("code/myList");
			result.addObject("codes", codes);
			result.addObject("requestURI", "code/myList.do");

		} catch (final Throwable oops) {

			result = new ModelAndView("redirect:/panic/misc.do");

		}

		return result;
	}

	//SearchForm ==============================================================================

	@RequestMapping(value = "/enter", method = RequestMethod.GET)
	public ModelAndView enter(@RequestParam final int raffleId) {
		ModelAndView result;

		try {

			final Raffle raffle = this.raffleService.findOne(raffleId);
			Assert.notNull(raffle);

			final CodeForm codeForm = new CodeForm();
			codeForm.setIdRaffle(raffleId);

			result = new ModelAndView("code/enter");
			result.addObject("codeForm", codeForm);

		} catch (final Throwable oops) {

			result = new ModelAndView("redirect:/panic/misc.do");

		}

		return result;

	}

	@RequestMapping(value = "/enter", method = RequestMethod.POST, params = "save")
	public ModelAndView save(@Valid final CodeForm codeForm, final BindingResult binding) {
		ModelAndView result;

		if (binding.hasErrors())
			result = this.createEditModelAndView(codeForm);
		else
			try {

				final Code code = this.codeService.findCodesByRaffleAndName(codeForm.getIdRaffle(), codeForm.getName());
				final String message = this.codeService.codeMessage(code);

				result = this.createEditModelAndView(codeForm, message);

			} catch (final Throwable oops) {
				result = this.createEditModelAndView(codeForm, "code.commit.error");
			}

		return result;
	}

	// Ancilliary methods
	// =================================================================================================

	protected ModelAndView createEditModelAndView(final CodeForm codeForm) {
		ModelAndView result;

		result = this.createEditModelAndView(codeForm, null);

		return result;
	}

	protected ModelAndView createEditModelAndView(final CodeForm codeForm, final String message) {
		ModelAndView result;

		result = new ModelAndView("code/enter");

		result.addObject("codeForm", codeForm);
		result.addObject("message", message);

		return result;
	}

}
